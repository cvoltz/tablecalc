Bottom: ee2727d3b725f3c0c755c85c3eb5898b8f44a4b7
Top:    3365e7f9e292693b892fe05f705c9491ed4be9a8
Author: Christopher Voltz <cjunk@voltz.ws>
Date:   2017-05-01 22:22:35 -0500

Refresh of update

---

diff --git a/script.js b/script.js
index 74fe026..4d6cb43 100644
--- a/script.js
+++ b/script.js
@@ -1,8 +1,8 @@
-var tablecalc_table;
+/*var tablecalc_table;
 var tablecalc_crow;
 var tablecalc_ccol;
-var tablecalc_labels=new Array();
-var tablecalc_defer=new Array();
+var tablecalc_labels;
+var tablecalc_defer;*/
 
 
 function tablecalcXY(st) {
@@ -12,20 +12,26 @@ function tablecalcXY(st) {
 	x=c[0].substr(1)*1;
 	return new Array(x,y);
 }
-function tablecalcVal(x,y,table) {
+function tablecalcVal(x,y,table,tostring) {
+	if (typeof tostring == 'undefined') {
+		tostring=0;
+	}
 	var v='notset';
 	if ((x>=0) && (y>=0)) {
 		if (typeof table.rows != 'undefined') {
 			if (typeof table.rows[y] != 'undefined') {
 				if (typeof table.rows[y].cells[x] != 'undefined') {
-					var m=table.rows[y].cells[x].innerHTML;
-					//alert("Checking for float: "+stripHTML(m));
-					m=parseFloat(stripHTML(m));
+					var mr=stripHTML(table.rows[y].cells[x].innerHTML);
+					mr=mr.trim();
+					m=parseFloat(mr);
 					if (!isNaN(m)) {
 						v=m;
 					} else {
-						//v="notnum";
-						v="0";
+						if (!tostring) {
+							v="notnum";
+						} else {
+							v=String(mr);
+						}
 					}
 				}
 			}
@@ -34,14 +40,38 @@ function tablecalcVal(x,y,table) {
 	return v;
 }
 
+
+function tablecalcToArray(a) {
+	if (!Array.isArray(a)) {
+		return [a];
+	} else {
+		return a;
+	}
+}
+
+function tablecalcToNumArray(a) {
+	if (!Array.isArray(a)) {
+		a=[a];
+	}
+	var b=[];
+	for (var i=0;i<a.length;i++) {
+		if (!isNaN(a[i]*1)) {
+			b.push(a[i]);
+		}
+	}
+	return b;
+}
+
 function correctFloat(a) {
 	var x=10000000000000;
 	return Math.round(a*x)/x;
 }
 
 function sum(a) {
+	a=tablecalcToNumArray(a);
 	var s=0;
 	for (var i=0;i<a.length;i++) {
+		tablecalc_log(a[i]*1);
 		s+=a[i]*1;
 		s=correctFloat(s);
 	}
@@ -49,10 +79,12 @@ function sum(a) {
 }
 
 function average(a) {
+	a=tablecalcToNumArray(a);
 	return correctFloat(sum(a)/a.length);
 }
 
 function min(a) {
+	a=tablecalcToNumArray(a);
 	var s=1*a[0];
 	for (var i=1;i<a.length;i++) {
 		if (1*a[i]<s) {
@@ -64,6 +96,7 @@ function min(a) {
 
 
 function max(a) {
+	a=tablecalcToNumArray(a);
 	var s=1*a[0];
 	for (var i=1;i<a.length;i++) {
 		if (1*a[i]>s) {
@@ -122,12 +155,12 @@ function range(x1,y1,x2,y2) {
 }
 
 function count(a) {
+	a=tablecalcToArray(a);
 	return a.length;
 }
 
 function calc() {
-	tablecalcProcessDefer();
-	return "";
+	return nop();
 }
 
 function round(num,digits) {
@@ -135,9 +168,11 @@ function round(num,digits) {
 	for (var i=0;i<digits;i++) {
 		d*=10;
 	}
-	return (Math.round(num*d)/d).toFixed(digits);
+	var n=Math.round(num*d)/d;
+	return n.toFixed(digits);
 }
 
+
 function nop() {
 	return "";
 }
@@ -159,6 +194,15 @@ function check(condition,whenTrue,whenFalse) {
 	}
 }
 
+function countif(range,check,operation) {
+	a=tablecalcToArray(range);
+	var cnt=0;
+	for (var i=0;i<a.length;i++) {
+		cnt+=compare(a[i],check,operation);
+	}
+	return cnt;
+}
+
 function compare(a,b,operation) {
 	if (typeof operation == 'undefined') {
 		operation='=';
@@ -193,10 +237,39 @@ function compare(a,b,operation) {
 	return 0;
 }
 
-function tablecalc(divID, formula, nodefer) {
+function tablecalc_log(st) {
+	if (!tablecalc_debug) {return;}
+	if (tablecalc_debug==1) {
+		alert(st);
+	} else {
+		console.log(st);
+	}
+}
+
+function tablecalc(divID, formula, final) {
+	if (typeof tablecalc_debug === "undefined") {
+    	window.tablecalc_debug=0;
+	}
+	if (typeof tablecalc_labels === "undefined") {
+    	window.tablecalc_labels=[];
+	}
+	if (typeof tablecalc_defer === "undefined") {
+		window.tablecalc_defer=[];
+	}
+	if (typeof tablecalc_crow === "undefined") {
+		window.tablecalc_crow=null;
+	}
+	if (typeof tablecalc_ccol === "undefined") {
+		window.tablecalc_ccol=null;
+	}
+	if (typeof tablecalc_table === "undefined") {
+		window.tablecalc_table=null;
+	}
+
+
 	var oFormula=formula;
-	if (isNaN(nodefer)) {nodefer=0;}
-	//alert("Entering: "+divID+"=>"+formula);
+	if (isNaN(final)) {final=0;}
+	tablecalc_log("Entering: "+divID+"=>"+formula+"; is final: "+final);
 	var div = document.getElementById(divID);
 	//getting parent TD
 	var table=0;
@@ -232,40 +305,53 @@ function tablecalc(divID, formula, nodefer) {
 				} else {
 					if (typeof tablecalc_labels[matchB[0]] != 'undefined') {
 						tmp_table=tablecalc_labels[matchB[0]];
-					}
-				}
-				var matchC=matchB[1].split(':',2);
-				if (matchC.length<2) {
-					matchC[1]=matchC[0];
-				}
-				from=tablecalcXY(matchC[0]);
-				to=tablecalcXY(matchC[1]);
-				if (from[0]>to[0]) {
-					var tmp=to[0];
-					to[0]=from[0];
-					from[0]=tmp;
-				}
-				if (from[1]>to[1]) {
-					var tmp=to[1];
-					to[1]=from[1];
-					from[1]=tmp;
-				}			
-				for (var fx=from[0];fx<=to[0];fx++) {
-					for (var fy=from[1];fy<=to[1];fy++) {
-						if ((fx==cCol) && (fy==cRow)) {continue;}
-						var tmp=tablecalcVal(fx,fy,tmp_table);
-						//alert("member["+fx+","+fy+"]="+tmp);						
-						if (tmp == 'notnum') {
+					} else {
+						if (final) {
+							tmp_table="notable";
+						} else {
 							tablecalcAddDefer(divID,oFormula);
-							if (!nodefer) {
-								tablecalcProcessDefer();
-							}							
+							//tablecalcProcessDefer();
 							return false;
 						}
-						if (tmp!='notset') {
-							members[members.length]=tmp;
+					}
+				}
+				if (tmp_table!="notable") {
+					var matchC=matchB[1].split(':',2);
+					if (matchC.length<2) {
+						matchC[1]=matchC[0];
+					}
+					from=tablecalcXY(matchC[0]);
+					to=tablecalcXY(matchC[1]);
+					if (from[0]>to[0]) {
+						var tmp=to[0];
+						to[0]=from[0];
+						from[0]=tmp;
+					}
+					if (from[1]>to[1]) {
+						var tmp=to[1];
+						to[1]=from[1];
+						from[1]=tmp;
+					}			
+					for (var fx=from[0];fx<=to[0];fx++) {
+						for (var fy=from[1];fy<=to[1];fy++) {
+							if ((fx==cCol) && (fy==cRow) && (tmp_table==table)) {continue;}
+							var tmp=tablecalcVal(fx,fy,tmp_table);
+							tablecalc_log("member["+fx+","+fy+"]="+tmp);					
+							if ( (tmp == 'notnum') || (tmp == 'notset') ) {
+								tablecalcAddDefer(divID,oFormula);
+								if (!final) {
+									//tablecalcProcessDefer();
+									return false;
+								} else {
+									members[members.length]=tablecalcVal(fx,fy,tmp_table,1);
+								}					
+							} else {/*if (tmp!='notset') {*/
+								members[members.length]=tmp;
+							}
 						}
 					}
+				} else {
+					tablecalc_log("table not found by label: "+matchB[0]);
 				}
 			}
 			var result="";
@@ -292,24 +378,27 @@ function tablecalc(divID, formula, nodefer) {
 		}
 	}
 	
-	//formula=formula.replace(/\(([a-z0-9_]+)\)/g,"('$1')");
-	//alert("Evaluating [nm]: "+formula);
-	//formula=formula.replace(/\#([^\(\);,]+)/,"'$1'");
 	formula=formula.replace(/;/g,",");	
-//	alert("Evaluating: "+formula);
+	tablecalc_log("Evaluating: "+formula);
 	var rc;
 	try {
 		eval('calcresult = '+formula);
-		div.innerHTML=calcresult;
-		//alert("Got result: "+calcresult);
-		rc=true;
+		//if (!isNaN(calcresult)) {
+		tablecalc_log("Got result: "+calcresult+" ("+(typeof calcresult)+")");
+		if ((typeof calcresult === "number") && (isNaN(calcresult))) {
+			tablecalcAddDefer(divID,oFormula);
+			rc=false;
+		} else {
+			div.innerHTML=calcresult;
+			rc=true;
+		}
 	} catch (e) {
 		rc=false;
-		//alert("Exception: "+e);
+		tablecalc_log("Exception: "+e);
 		tablecalcAddDefer(divID,oFormula);
 	}
-	if (!nodefer) {
-		tablecalcProcessDefer();
+	if (!final) {
+		//tablecalcProcessDefer();
 	}
 	return rc;
 }
@@ -317,25 +406,45 @@ function tablecalc(divID, formula, nodefer) {
 function tablecalcAddDefer(divID,formula) {
 	if (typeof tablecalc_defer[divID] == 'undefined') {
 		tablecalc_defer[divID]=formula;
-		//alert("Added defer: "+divID+"=>"+tablecalc_defer[divID]);		
+		tablecalc_log("Added defer: "+divID+"=>"+tablecalc_defer[divID]);		
 	}
 }
 
 function tablecalcProcessDefer() {
-	var exit=1;
+	var exit;
 	var steps=0;
 	do {
 		steps++;
+		exit=1;
 		for (var divID in tablecalc_defer) {
 			if (tablecalc_defer[divID].length) {
-				//alert("Calling defer: "+divID+"=>"+tablecalc_defer[divID]);
-				if (tablecalc(divID,tablecalc_defer[divID],1)) {
-					tablecalc_defer[divID]="";
+				tablecalc_log("calling defer: "+divID+"=>"+tablecalc_defer[divID]);
+				var tmp=tablecalc_defer[divID];
+				tablecalc_defer[divID]="";
+				if (!tablecalc(divID,tmp,0)) {
+					tablecalc_defer[divID]=tmp;
+				} else {
 					exit=0;
 				}
 			}
 		}
 	} while ( (!exit) && (steps<99) );
+	if (steps>=99) {
+		tablecalc_log("max steps reached!");
+	}
+}
+
+function tablecalc_final() {
+	tablecalc_log("entering final");
+	tablecalcProcessDefer();
+	for (var divID in tablecalc_defer) {
+		if (tablecalc_defer[divID].length) {
+			tablecalc_log("calling final defer: "+divID+"=>"+tablecalc_defer[divID]);
+			if (tablecalc(divID,tablecalc_defer[divID],1,99)) {
+				tablecalc_defer[divID]="";
+			}
+		}
+	}
 }
 
 function findParentNodeByName(pNode,st) {
diff --git a/syntax.php b/syntax.php
index ed3b070..44ffa67 100644
--- a/syntax.php
+++ b/syntax.php
@@ -17,11 +17,11 @@ class syntax_plugin_tablecalc extends DokuWiki_Syntax_Plugin {
     function getInfo() {
         return array(
                 'author' => 'Gryaznov Sergey',
-                'email'  => 'stalker@os2.ru',
-                'date'   => '13-04-10',
+                'email'  => 'stalker@narezka.org',
+                'date'   => '09-02-17',
                 'name'   => 'Table Calculations Plugin',
                 'desc'   => 'Enables Excel style formulas in table syntax',
-                'url'    => 'http://narezka.ru/tablecalc',
+                'url'    => 'https://narezka.org/tablecalc',
                 );
     }
  
@@ -49,7 +49,7 @@ class syntax_plugin_tablecalc extends DokuWiki_Syntax_Plugin {
 		return array('formula'=>trim($match), 'divid'=>'__tablecalc'.$this->id_index);*/
 		$signs="-~=+*.,;\/!|&\(\)";
 		$pattern="/[$signs]*([a-zA-Z]+)\(/is";
-		$aAllowed=array("cell","row","col","sum","average","count","nop","round","range","label","min","max","calc","check","compare");
+		$aAllowed=array("cell","row","col","sum","average","count","countif","nop","round","range","label","min","max","calc","check","compare");
 		if (preg_match_all($pattern,$match,$aMatches)) {
 			foreach ($aMatches[1] as $f) {
 				if (!in_array(strtolower($f),$aAllowed)) {
@@ -64,14 +64,21 @@ class syntax_plugin_tablecalc extends DokuWiki_Syntax_Plugin {
 		$match=preg_replace("/#([^\(\);,]+)/","'\\1'",$match);
 		$match=preg_replace("/\(([a-z0-9_]+)\)/","('\\1')",$match);
 		$this->id_index++;
-		return array('formula'=>$match, 'divid'=>'__tablecalc'.$this->id_index);
+		//var_dump($this->id_index);
+		return array('formula'=>$match, 'divid'=>'__tablecalc'.$this->id_index,'idx'=>$this->id_index);
 
     }
  
     function render($mode, &$renderer, $data) {
 		global $INFO, $ID, $conf;
+		//var_dump($data);
 		if($mode == 'xhtml'){
-			$renderer->doc .= '<span id="'.$data['divid'].'"><script type="text/javascript" defer="defer">tablecalc("'.$data['divid'].'","'.$data['formula'].'");</script></span>';
+			if ($data["idx"]==$this->id_index) {
+				$final="setTimeout(tablecalc_final,0);";
+			} else {
+				$final="";
+			}
+			$renderer->doc .= '<span id="'.$data['divid'].'"><script type="text/javascript" defer="defer">tablecalc("'.$data['divid'].'","'.$data['formula'].'");'.$final.'</script></span>';
 			return true;
         }
 		return false;
